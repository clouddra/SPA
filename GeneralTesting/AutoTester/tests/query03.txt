52
cat: All Category
1 - Stmt ::
stmt s;
Select s
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
5000
2 - ReturnBoolean, Follows ::

Select BOOLEAN such that Follows (1, 2)
true
5000
3 - Pattern, Assign ::
assign a;
Select a pattern a ("y", "y+h*8")
9
5000
4 - Pattern, While :: 
while w;
Select w pattern w ("NobodyReason", _)
5
5000
5 - Calls, Procedure ::
procedure p, q;
Select p such that Calls (p, q)
Dogfight, GHETTOBLASTER, BlazinBeat, SystematicFantasy
5000
6 - Calls, Procedure ::
procedure p;
Select p such that Calls (p, _)
Dogfight, GHETTOBLASTER, BlazinBeat, SystematicFantasy
5000
7 - Stmt, Constant, With ::
stmt s; constant c;
Select s with s.stmt# = c.value
1, 2, 3, 5, 7, 8, 25
5000
8 - Modifies, Procedure, Variable ::
procedure p; variable v;
Select v such that Modifies(p,v)
x, z, i, y, h, g, p, m, s, t, u, b, best
5000
9 - Next, ReturnBoolean ::

Select BOOLEAN such that Next (1, 2)
true
5000
10 - Modifies, Pattern, Assign ::
assign a;
Select a such that Modifies(a, "z") pattern a (_, _"h+x"_)
7
5000
11 - Parent, Pattern, While, Assign ::
while w; assign a;
Select a such that Parent(w, a) pattern a (_, _"y + h * 8"_)
9
5000
12 - Pattern, Assign ::
assign a;
Select a pattern a (_, _"x+2"_)
19
5000
13 - Pattern, If ::
if ifs;
Select ifs pattern ifs ("RomancingTrain", _, _)
10
5000
14 - And, NextStar, While, Follows ::
prog_line n; while w;
Select n such that Follows(w, n) and Next* (10, n) 
13
5000
15 - Procedure, With ::
procedure p;
Select p with p.procName = "GambleRumble"
GambleRumble
5000
16 - CallsStar, ReturnBoolean ::
procedure p,q;
Select BOOLEAN such that Calls*("GHETTOBLASTER", "GambleRumble")
true
5000
17 - Uses, CallsStar, And ::
procedure q; variable v;
Select v such that Calls*("GHETTOBLASTER",q) and Uses(q, v)
h, x, y, j, NobodyReason, RomancingTrain, g
5000
18 - CallsStar, ReturnBoolean ::

Select BOOLEAN such that Calls*("GHETTOBLASTER", "GHETTOBLASTER")
false
5000
19 - Calls, And ::
procedure p1, p2, q;
Select q such that Calls(p1, q) and Calls (p2, q) and Calls(p2, p1)
Dogfight, GHETTOBLASTER
5000
20 - Calls, And ::
procedure dogfight;
Select dogfight such that Calls("SystematicFantasy", dogfight) and Calls("GHETTOBLASTER", dogfight)
Dogfight
5000
21 - CallsStar, And ::
procedure dogfight;
Select dogfight such that Calls*("SystematicFantasy", dogfight) and Calls*("GHETTOBLASTER", dogfight)
Dogfight, GambleRumble
5000
22 - Calls, And, With ::
procedure p1, p2, q1, q2, move;
Select move such that Calls(p1, q1) and Calls(p2, q2) with p2.procName="SystematicFantasy" and p1.procName="GHETTOBLASTER" such that Calls(q2, move) such that Calls(q1, move)
GambleRumble
5000
23 - NextStar, ReturnBoolean ::

Select BOOLEAN such that Next*(4, 14)
true
5000
24 - NextStar, ReturnBoolean ::

Select BOOLEAN such that Next*(12, 5)
true
5000
25 - NextStar, ReturnBoolean ::

Select BOOLEAN such that Next*(1, 3)
true
5000
26 - Pattern ::
assign a;
Select a pattern a ("s", "f-x")
20
5000
27 - NextStar ::
prog_line n;
Select n such that Next*(1 , n)
2, 3
5000
28 - Next, Pattern ::
assign a; if ifs;
Select a pattern a ("Motsu", _) such that Next (ifs, a)
none
5000
29 - Next, Pattern ::
while w; if ifs;
Select w pattern w ("Motsu", _) such that Next (ifs, w)
18
5000
30 - Pattern ::
while w;
Select w pattern w ("Motsu", _)
18
5000
31 - Next ::
stmt s;
Select s such that Next(10, s)
11, 12
5000
32 - NextStar ::
stmt s;
Select s such that Next*(5, s)
5, 6, 7, 8, 9, 10, 11, 12, 13, 14
5000
33 - Next ::
stmt s; while w;
Select s such that Next(w, s)
6, 13, 19, 21
5000
34 - Next ::
stmt s; while w;
Select w such that Next(w, s)
5, 18
5000
35 - Modifies, Variable ::
stmt s; variable v;
Select v such that Modifies(s, v) with s.stmt# = 16
y, s, x
5000
36 - Modifies, Variable ::
stmt s; variable v;
Select v such that Modifies(s, v) with s.stmt# = 8
x, z, h
5000
37 - Modifies, Variable ::
stmt s; variable v;
Select v such that Modifies(s, v) with s.stmt# = 5
x, z, i, h, y, g
5000
38 - Modifies, Variable ::
stmt s; variable v;
Select v such that Modifies(s, v) with s.stmt# = 30
b, m, y, x, s, t, h, z, g, i, p, best
5000
39 - Affects, ReturnBoolean ::

Select BOOLEAN such that Affects (1, 2)
false
5000
40 - Affects, ReturnBoolean ::

Select BOOLEAN such that Affects (4, 9)
true
5000
41 - Affects ::
assign a;
Select a such that Affects (4, a)
9
5000
42 - Affects ::
assign a;
Select a such that Affects (6, a)
7
5000
43 - Affects ::
assign a;
Select a such that Affects (9, a)
9
5000
44 - Affects ::
assign a;
Select a such that Affects (19, a)
19, 20
5000
45 - Affects ::
assign a;
Select a such that Affects (11, a)
6
5000
46 - Affects ::
assign a;
Select a such that Affects (a, 9)
4, 9
5000
47 - Affects ::
assign a;
Select a such that Affects (a, 23)
none
5000
48 - Affects ::
assign a;
Select a such that Affects (a, 19)
19
5000
49 - Affects ::
assign a1, a2;
Select a1 such that Affects (a1, a2)
4, 6, 9, 11, 19
5000
50 - Affects ::
assign a1, a2;
Select a2 such that Affects (a1, a2)
19, 7, 9, 6, 20
5000
51 - Calls ::
procedure p;
Select p such that Calls(_,p)
Dogfight, GHETTOBLASTER, BlazinBeat, GambleRumble
5000
52 - ContainsStar :: return all procedures in which while is nested in if statement
procedure p; if ifStmt; while w;
Select p such that Contains* (p, ifStmt) and Contains* (ifStmt, w)
GHETTOBLASTER
5000