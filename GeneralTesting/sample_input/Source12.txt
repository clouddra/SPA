procedure John {	
	i=1;
	n=i;
	a = i+n-2;
	c =    i*n;
		if w then {
		while i{
			o=n+a;
				if x then {
				call First;
				while b{
					a = a-i;
					b=a*1;}
				n=a+1;
				call Second;
				} else {
					while n {
						call Third;
						while i{
							if y then {
								call First;
								while b{
									i= a+5-3*n;
									b=b-1;
									while n{
										while c{
											if z then {
												while o{
													a = a+1;}
												a=c;
												while n {
													while b{
														while i{ 
															n=3;
															i=n*3-1;
														}
														while a{
															a=a;
															while b{
																n = a+c;
																n=n;
															}
														}
													}
												}
											}
											else {
												b=a+5+1-a-n*c-i+o;
												b=a;
												i=n+1;
												n=i-n+a*o+c;
											}
										}
									}
									while n{
										i=1+5;
									}
								}
							}
							else {
								call Second;
								n=a+i;
							}
						}		
						b=b+1;
						a=i;
					}
				}
			}
		} else {
			while b{
				n=i*n-a*o+c;
			}
		} 
}
		
procedure First {
	x=2;
	z=3;
	while x { 
		y=x+z;
		x=y+z;
		z=x+y;
	}
	while z {
		y=4;
			while y {
				if x then {
					call Second;
					y=x+z;
					x=y+z;
					call Third;
					z=x+y;
				} else {
					call Third;
				}
		}
	}
}

procedure Second {
	x=0;
	i=5;
	z=2;
	while z {
		while x {
			while i {
				x=x+2*y;
				call Third;	
				i=i-1;
			}
			if x then {
				x=x+1;
			} else {
				z=1;
			}
		}
		z=z+x-i;
		y=z*2+i;
		x=x*y-z;
	}
}

procedure Third {
	z=5;
	v=z;
	z=1+z-v*2;
	z=2*z-v;
	call Fourth;
}

procedure Fourth {
z=1;
}